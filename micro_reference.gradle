def aidlSrcDirs = []
def assetsSrcDirs = []
def javaSrcDirs = []
def jniSrcDirs = []
def jniLibsSrcDirs = []
def manifestSrcFiles = []
def resSrcDirs = []

def addLibrary
addLibrary = { libraryPath ->
    // check [micro.properties] exists or not
    File libraryPropertiesFile = new File(libraryPath + '/micro.properties');
    if (!libraryPropertiesFile.exists()) return

    def libraryName = file(libraryPath).name

    // read library properties
    def libraryProperties = new Properties()
    libraryPropertiesFile.withInputStream { libraryProperties.load(it) }
    libraryProperties = new ConfigSlurper().parse(libraryProperties)

    // check library reference
    libraryProperties.android.library.reference.each {
        File childLibrary = new File("$projectDir" + it.value);
        if (childLibrary.exists()) {
            addLibrary(childLibrary.absolutePath)
        } else {
            logger.error(libraryName + "[library]: android.library.reference [" + childLibrary.absolutePath + "] is not exists.")
        }
    }

    // add aidl.srcDir
    def aidlSrcDir = libraryProperties.getProperty('aidl.srcDir')
    if (aidlSrcDir.size() == 0) {
        aidlSrcDir = libraryName + "/src/main/aidl";
    }
    aidlSrcDir = aidlSrcDir.toString()
    if (!aidlSrcDirs.contains(aidlSrcDir)) {
        aidlSrcDirs << aidlSrcDir
    }

    // add assets.srcDir
    def assetsSrcDir = libraryProperties.getProperty('assets.srcDir')
    if (assetsSrcDir.size() == 0) {
        assetsSrcDir = libraryName + "/src/main/assets";
    }
    assetsSrcDir = assetsSrcDir.toString()
    if (!assetsSrcDirs.contains(assetsSrcDir)) {
        assetsSrcDirs << assetsSrcDir
    }

    // add jni.srcDir
    def jniSrcDir = libraryProperties.getProperty('jni.srcDir')
    if (jniSrcDir.size() == 0) {
        jniSrcDir = libraryName + "/src/main/jni";
    }
    jniSrcDir = jniSrcDir.toString()
    if (!jniSrcDirs.contains(jniSrcDir)) {
        jniSrcDirs << jniSrcDir
    }

    // add jniLibs.srcDir
    def jniLibsSrcDir = libraryProperties.getProperty('jniLibs.srcDir')
    if (jniLibsSrcDir.size() == 0) {
        jniLibsSrcDir = libraryName + "/src/main/jniLibs";
    }
    jniLibsSrcDir = jniLibsSrcDir.toString()
    if (!jniLibsSrcDirs.contains(jniLibsSrcDir)) {
        jniLibsSrcDirs << jniLibsSrcDir
    }

    // add java.srcDir
    def javaSrcDir = libraryProperties.getProperty('java.srcDir')
    if (javaSrcDir.size() == 0) {
        javaSrcDir = libraryName + "/src/main/java";
    }
    javaSrcDir = javaSrcDir.toString()
    if (!javaSrcDirs.contains(javaSrcDir)) {
        javaSrcDirs << javaSrcDir
    }

    // add res.srcDir
    def resSrcDir = libraryProperties.getProperty('res.srcDir')
    if (resSrcDir.size() == 0) {
        resSrcDir = libraryName + "/src/main/res";
    }
    resSrcDir = resSrcDir.toString()
    if (!resSrcDirs.contains(resSrcDir)) {
        resSrcDirs << resSrcDir
    }

    // add manifest.srcFile
    def manifestSrcFile = libraryProperties.getProperty('manifest.srcFile')
    if (manifestSrcFile.size() == 0) {
        manifestSrcFile = libraryName + "/src/AndroidManifest.xml";
    }
    manifestSrcFile = manifestSrcFile.toString()
    if (!manifestSrcFiles.contains(manifestSrcFile)) {
        manifestSrcFiles << manifestSrcFile
    }
}

def filterManifest = { manifest ->

    def from = manifest.indexOf("<application>") + "<application>".length()
    def end = manifest.indexOf("</application>")
    def body = manifest.substring(from, end).trim();
    if (body == "") return ""

    def packageNamePattern = 'package=\".*\"'
    def packageNameMatcher = manifest.substring(0, from) =~ packageNamePattern
    packageNameMatcher.matches()
    def packageName = packageNameMatcher[0].substring(packageNameMatcher[0].indexOf("\"") + 1, packageNameMatcher[0].length() - 1)

    def namePattern = 'android:name=\".*\"'
    def nameMatcher = body =~ namePattern
    nameMatcher.matches()
    nameMatcher.each {
        def name = it.substring(it.indexOf("\"") + 1, it.length() - 1);
        if (name[0] == ".") {
            body = body.replaceAll("\"" + name + "\"", "\"" + packageName + name + "\"")
        }
    }
    return body
}

def microModuleHandler = { ->

    File moduleDir = new File("$projectDir");
    String[] microModuleDirs = moduleDir.list();
    if (!microModuleDirs.toString().contains('main')) {
        throw new GradleException('without micro-module with name \'main\'')
    }

    def mainLibrary = "$projectDir" + '/main';
    addLibrary(mainLibrary)

    def libraryAndroidManifest = ''
    for (int i = 0; i < manifestSrcFiles.size() - 1; i++) {
        def srcFilePath = manifestSrcFiles[i].toString()
        def name = srcFilePath.subSequence(0, srcFilePath.indexOf("/"))
        File manifestFile = new File("$projectDir" + "/" + srcFilePath)
        if (!manifestFile.exists()) continue
        def body = filterManifest(manifestFile.getText())
        if (body == "") continue
        libraryAndroidManifest += "        <!-- MICRO MODULE START: " + name + " -->\n        " + body + "\n        <!-- MICRO MODULE END: " + name + " -->\n\n";
    }

    def mainMicroAndroidManifest = file(manifestSrcFiles[manifestSrcFiles.size() - 1]).getText().toString().trim()
    def applicationPattern = '</\\s{0,}application\\s{0,}>'
    def applicationMatcher = mainMicroAndroidManifest =~ applicationPattern
    applicationMatcher.matches()
    def from = mainMicroAndroidManifest.indexOf(applicationMatcher[0])
    def moduleAndroidManifest = mainMicroAndroidManifest.substring(0, from).toString().trim() + "\n\n"
    moduleAndroidManifest += libraryAndroidManifest
    moduleAndroidManifest += "    " + mainMicroAndroidManifest.substring(from, mainMicroAndroidManifest.length()).toString().trim()

    new File("$buildDir").mkdirs()
    def file = new File("$buildDir\\AndroidManifest.xml")
    file.createNewFile()
    file.write(moduleAndroidManifest)

    android.sourceSets.main.aidl.srcDirs = aidlSrcDirs
    android.sourceSets.main.assets.srcDirs = assetsSrcDirs
    android.sourceSets.main.java.srcDirs = javaSrcDirs
    android.sourceSets.main.jni.srcDirs = jniSrcDirs
    android.sourceSets.main.jniLibs.srcDirs = jniLibsSrcDirs
    android.sourceSets.main.res.srcDirs = resSrcDirs
    android.sourceSets.main.manifest.srcFile "$buildDir/AndroidManifest.xml"
}

task microModuleTask {
    microModuleHandler()
}

preBuild.doFirst {
    microModuleHandler()
}