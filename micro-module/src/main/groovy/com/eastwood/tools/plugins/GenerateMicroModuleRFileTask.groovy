package com.eastwood.tools.plugins

import com.android.build.gradle.api.BaseVariant
import com.android.build.gradle.api.BaseVariantOutput
import com.android.build.gradle.internal.res.GenerateLibraryRFileTask
import com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask
import com.eastwood.tools.plugins.core.MicroModule
import com.eastwood.tools.plugins.core.MicroModuleInfo
import com.eastwood.tools.plugins.core.Utils
import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.tasks.TaskAction

import java.util.Map.Entry

class GenerateMicroModuleRFileTask extends DefaultTask {

    public final static String R_PATH = "/build/generated/source/r/"
    public final static String R_PATH_3_2 = "/build/generated/not_namespaced_r_class_sources/"

    String packageName
    File outputDir
    MicroModuleInfo microModuleInfo

    @TaskAction
    def run() {
        def packageNames = []
        microModuleInfo.includeMicroModules.each {
            MicroModule microModule = it.value
            def microManifestFile = new File(microModule.microModuleDir, MicroModulePlugin.MAIN_MANIFEST_PATH)
            if (!microManifestFile.exists()) {
                return
            }
            def microModulePackageName = Utils.getAndroidManifestPackageName(microManifestFile)
            if (microModulePackageName == null || packageNames.contains(microModulePackageName) || microModulePackageName == packageName) {
                return
            }

            packageNames << microModulePackageName
            def RPath = outputDir.canonicalPath + "/" + microModulePackageName.replace(".", "/")
            File RFile = project.file(RPath + "/R.java")
            if (RFile.exists()) {
                return
            }
            project.file(RPath).mkdirs()
            RFile.setText("package " + microModulePackageName + ";\n\n/** This class is generated by micro-module plugin, DO NOT MODIFY. */\npublic class R extends " + packageName + ".R {\n\n}")
        }

        if (new File(project.projectDir, R_PATH).exists() || new File(project.projectDir, R_PATH_3_2).exists()) {
            return
        }

        def RPath = outputDir.canonicalPath + "/" + packageName.replace(".", "/")
        File RFile = project.file(RPath + "/R.java")
        if (RFile.exists()) {
            return
        }
        project.file(RPath).mkdirs()
        RFile.setText("package " + packageName + ";\n\n/** This class is generated by micro-module plugin, DO NOT MODIFY. */\npublic class R {\n\n}")
    }

    static void rewriteOrGenerateMainMicroModuleRFile(Project project, BaseVariant variant, String packageName, File outputDir) {
        def rDir = "r"
        def taskName = "process${variant.name.capitalize()}Resources"
        def task = project.tasks.findByName(taskName)
        if (task == null) {
            rDir = "out"
            taskName = "generate${variant.name.capitalize()}RFile"
            task = project.tasks.findByName(taskName)
        }
        if (task == null) return

        task.doLast {
            def path
            if (new File(project.projectDir, R_PATH).exists()) {
                clearMainMicroModuleRFile(project, packageName, outputDir.canonicalPath)
                path = project.projectDir.absolutePath + R_PATH + variant.name + "/"
            } else if (new File(project.projectDir, R_PATH_3_2).exists()) {
                clearMainMicroModuleRFile(project, packageName, outputDir.canonicalPath)
                path = project.projectDir.absolutePath + R_PATH_3_2 + variant.name + "/" + taskName + "/" + rDir + "/"
            } else {
                println '------------ '
                generateMainMicroModuleRFile(project, variant, packageName, outputDir)
                return
            }

            def file = project.file(path + packageName.replace(".", "/") + "/R.java")
            def newR = file.text.replace("public final class R", "public class R").replace("private R() {}", "")
            file.write(newR)
        }
    }

    static void clearMainMicroModuleRFile(Project project, String packageName, String path) {
        def RPath = path + "/" + packageName.replace(".", "/")
        File RFile = project.file(RPath + "/R.java")
        if (RFile.exists()) {
            RFile.delete()
        }
    }

    static void generateMainMicroModuleRFile(Project project, BaseVariant variant, String packageName, File outputDir) {
        Map<String, Map<String, String>> dataMap = new HashMap<>()
        variant.outputs.each { BaseVariantOutput output ->
            File rFile
            if (output.processResources instanceof GenerateLibraryRFileTask) {
                GenerateLibraryRFileTask resourcesTask = output.processResources
                rFile = resourcesTask.textSymbolOutputFile
            } else if (output.processResources instanceof LinkApplicationAndroidResourcesTask) {
                LinkApplicationAndroidResourcesTask resourcesTask = output.processResources
                rFile = resourcesTask.textSymbolOutputFile
            } else {
                throw new RuntimeException("MicroModule minimum supported Android Gradle Plugin is 3.1.0.")
            }

            readRFile(dataMap, rFile)
        }

        StringBuilder rFileContent = new StringBuilder()
        rFileContent.append('package ')
        rFileContent.append(packageName)
        rFileContent.append(';\n\n//This class is generated by micro-module plugin, DO NOT MODIFY.\npublic class R {\n')
        for (Entry<String, Map<String, String>> entry : dataMap) {
            rFileContent.append('    public static final class ')
            rFileContent.append(entry.key)
            rFileContent.append(' {\n')
            for (Entry<String, String> childEntry : entry.value) {
                if (childEntry.value.startsWith('{')) {
                    rFileContent.append('        public static final int[] ')
                } else {
                    rFileContent.append('        public static final int ')
                }
                rFileContent.append(childEntry.key)
                rFileContent.append(' = ')
                rFileContent.append(childEntry.value)
                rFileContent.append(';\n')
            }
            rFileContent.append('    }\n')
        }
        rFileContent.append('}\n')
        def RPath = outputDir.canonicalPath + "/" + packageName.replace(".", "/")
        File RFile = project.file(RPath + "/R.java")
        RFile.setText(rFileContent.toString())
    }

    static void readRFile(Map<String, Map<String, String>> dataMap, File rFile) {
        if (!rFile.exists()) {
            return
        }

        rFile.readLines().each {
            def values = it.split(" ")
            if (values.length < 4) {
                return
            }

            def javaType = values[0]
            if (!javaType.startsWith('int')) {
                return
            }

            def symbolType = values[1]
            Map<String, String> fieldInfo = dataMap.get(symbolType)
            if (fieldInfo == null) {
                fieldInfo = new HashMap<>()
                dataMap.put(symbolType, fieldInfo)
            }

            def name = values[2]
            def value = values[3]
            if (value == '{') {
                value = it.substring(it.indexOf('{'))
            }
            fieldInfo.put(name, value)
        }
    }

}
